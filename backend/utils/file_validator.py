"""
ÌååÏùº Í≤ÄÏ¶ù Ïú†Ìã∏Î¶¨Ìã∞
"""
import os
import magic
from typing import Optional
import logging

from exceptions.file_exceptions import FileSizeExceedException, InvalidFileTypeException, FileValidationError

logger = logging.getLogger(__name__)

class FileValidator:
    """ÌååÏùº Í≤ÄÏ¶ù ÌÅ¥ÎûòÏä§"""
    
    # ÌååÏùº ÌÅ¨Í∏∞ Ï†úÌïú (Î∞îÏù¥Ìä∏)
    MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB
    
    # ÌóàÏö©Îêú ÌååÏùº ÌôïÏû•Ïûê
    ALLOWED_EXTENSIONS = ['.pdf']
    
    # ÌóàÏö©Îêú MIME ÌÉÄÏûÖ
    ALLOWED_MIME_TYPES = [
        'application/pdf',
        'application/x-pdf',
        'application/acrobat',
        'applications/vnd.pdf',
        'text/pdf',
        'text/x-pdf'
    ]
    
    @classmethod
    def validate_file_size(cls, file_content: bytes, filename: str = "") -> None:
        """ÌååÏùº ÌÅ¨Í∏∞ Í≤ÄÏ¶ù"""
        file_size = len(file_content)
        
        logger.info(f"üìè Validating file size: {filename} ({file_size / (1024 * 1024):.1f}MB)")
        
        if file_size > cls.MAX_FILE_SIZE:
            raise FileSizeExceedException(
                file_size=file_size,
                max_size=cls.MAX_FILE_SIZE,
                filename=filename
            )
        
        if file_size == 0:
            raise FileValidationError("ÌååÏùºÏù¥ ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.", filename)
            
        logger.info(f"‚úÖ File size validation passed: {filename}")
    
    @classmethod
    def validate_file_extension(cls, filename: str) -> None:
        """ÌååÏùº ÌôïÏû•Ïûê Í≤ÄÏ¶ù"""
        if not filename:
            raise FileValidationError("ÌååÏùºÎ™ÖÏù¥ Ï†úÍ≥µÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
        
        file_ext = os.path.splitext(filename.lower())[1]
        
        logger.info(f"üìÑ Validating file extension: {filename} ({file_ext})")
        
        if file_ext not in cls.ALLOWED_EXTENSIONS:
            raise InvalidFileTypeException(filename, cls.ALLOWED_EXTENSIONS)
            
        logger.info(f"‚úÖ File extension validation passed: {filename}")
    
    @classmethod  
    def validate_file_content(cls, file_content: bytes, filename: str = "") -> None:
        """ÌååÏùº ÎÇ¥Ïö© Í≤ÄÏ¶ù (MIME ÌÉÄÏûÖ Ï≤¥ÌÅ¨)"""
        try:
            # libmagicÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ Ïã§Ï†ú ÌååÏùº ÌÉÄÏûÖ ÌôïÏù∏
            mime = magic.from_buffer(file_content, mime=True)
            
            logger.info(f"üîç Detected MIME type: {filename} -> {mime}")
            
            if mime not in cls.ALLOWED_MIME_TYPES:
                raise FileValidationError(
                    f"Ïã§Ï†ú ÌååÏùº ÌòïÏãùÏù¥ PDFÍ∞Ä ÏïÑÎãôÎãàÎã§. (Í∞êÏßÄÎêú ÌòïÏãù: {mime})",
                    filename
                )
                
            logger.info(f"‚úÖ File content validation passed: {filename}")
            
        except magic.MagicException as e:
            logger.warning(f"‚ö†Ô∏è Could not detect MIME type for {filename}: {e}")
            # MIME ÌÉÄÏûÖ Í≤ÄÏ¶ù Ïã§Ìå® Ïãú Í∏∞Î≥∏Ï†ÅÏù∏ PDF Ìó§Îçî Ï≤¥ÌÅ¨
            cls._validate_pdf_header(file_content, filename)
    
    @classmethod
    def _validate_pdf_header(cls, file_content: bytes, filename: str = "") -> None:
        """PDF ÌååÏùº Ìó§Îçî Í≤ÄÏ¶ù"""
        if not file_content.startswith(b'%PDF-'):
            raise FileValidationError(
                "Ïò¨Î∞îÎ•∏ PDF ÌååÏùºÏù¥ ÏïÑÎãôÎãàÎã§. (PDF Ìó§ÎçîÍ∞Ä ÏóÜÏùå)",
                filename
            )
        logger.info(f"‚úÖ PDF header validation passed: {filename}")
    
    @classmethod
    def validate_file(cls, file_content: bytes, filename: str = "") -> None:
        """Ï†ÑÏ≤¥ ÌååÏùº Í≤ÄÏ¶ù (ÌÅ¨Í∏∞, ÌôïÏû•Ïûê, ÎÇ¥Ïö©)"""
        logger.info(f"üîç Starting file validation: {filename}")
        
        # 1. ÌååÏùº ÌÅ¨Í∏∞ Í≤ÄÏ¶ù
        cls.validate_file_size(file_content, filename)
        
        # 2. ÌååÏùº ÌôïÏû•Ïûê Í≤ÄÏ¶ù
        if filename:
            cls.validate_file_extension(filename)
        
        # 3. ÌååÏùº ÎÇ¥Ïö© Í≤ÄÏ¶ù
        cls.validate_file_content(file_content, filename)
        
        logger.info(f"‚úÖ Complete file validation passed: {filename}")
    
    @classmethod
    def get_file_info(cls, file_content: bytes, filename: str = "") -> dict:
        """ÌååÏùº Ï†ïÎ≥¥ Î∞òÌôò"""
        file_size = len(file_content)
        
        return {
            "filename": filename,
            "size_bytes": file_size,
            "size_mb": round(file_size / (1024 * 1024), 2),
            "max_size_mb": cls.MAX_FILE_SIZE // (1024 * 1024),
            "extension": os.path.splitext(filename.lower())[1] if filename else "",
            "is_valid_size": file_size <= cls.MAX_FILE_SIZE,
            "is_valid_extension": os.path.splitext(filename.lower())[1] in cls.ALLOWED_EXTENSIONS if filename else False
        }